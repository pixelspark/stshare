syntax = "proto3";

// The relevant bits from https://github.com/syncthing/syncthing/blob/8c8167a4ab3130c69bebcd53e0c11934fbc8e939/proto/lib/protocol/bep.proto#L93
// Modified for compatibility with ts-protoc. Let's hope the format remains backward compatible.
// License: Mozilla Public License Version 2.0
package protocol;

message FileInfo {
    // The field ordering here optimizes for struct size / alignment --
    // large types come before smaller ones.

    string             name           = 1;
    int64              size           = 3;
    int64              modified_s     = 5;
    uint64             modified_by    = 12;
    Vector             version        = 9;
    int64              sequence       = 10;
    repeated BlockInfo blocks         = 16;
    string             symlink_target = 17;
    bytes              blocks_hash    = 18;
    bytes              encrypted      = 19;
    FileInfoType       type           = 2;
    uint32             permissions    = 4;
    int32              modified_ns    = 11;
    int32              block_size     = 13;
    PlatformData       platform       = 14;

    // The local_flags fields stores flags that are relevant to the local
    // host only. It is not part of the protocol, doesn't get sent or
    // received (we make sure to zero it), nonetheless we need it on our
    // struct and to be able to serialize it to/from the database.
    uint32 local_flags = 1000;

    // The version_hash is an implementation detail and not part of the wire
    // format.
    bytes version_hash = 1001;

    // The time when the inode was last changed (i.e., permissions, xattrs
    // etc changed). This is host-local, not sent over the wire.
    int64 inode_change_ns = 1002;

    // The size of the data appended to the encrypted file on disk. This is
    // host-local, not sent over the wire.
    int32 encryption_trailer_size = 1003;

    bool deleted        = 6;
    bool invalid        = 7;
    bool no_permissions = 8;
}

enum FileInfoType {
    FILE_INFO_TYPE_FILE              = 0;
    FILE_INFO_TYPE_DIRECTORY         = 1;
    FILE_INFO_TYPE_SYMLINK_FILE      = 2 [deprecated = true];
    FILE_INFO_TYPE_SYMLINK_DIRECTORY = 3 [deprecated = true];
    FILE_INFO_TYPE_SYMLINK           = 4;
}

message BlockInfo {
    bytes  hash      = 3;
    int64  offset    = 1;
    int32  size      = 2;
    uint32 weak_hash = 4;
}

message Vector {
    repeated Counter counters = 1;
}

message Counter {
    uint64 id    = 1;
    uint64 value = 2;
}

message PlatformData {
    UnixData    unix    = 1; 
    WindowsData windows = 2;
    XattrData   linux   = 3 ;
    XattrData   darwin  = 4 ;
    XattrData   freebsd = 5 ;
    XattrData   netbsd  = 6;
}

message UnixData {
    // The owner name and group name are set when known (i.e., could be
    // resolved on the source device), while the UID and GID are always set
    // as they come directly from the stat() call.
    string owner_name = 1;
    string group_name = 2;
    int32  uid        = 3; 
    int32  gid        = 4; 
}

message WindowsData {
    // Windows file objects have a single owner, which may be a user or a
    // group. We keep the name of that account, and a flag to indicate what
    // type it is.
    string owner_name     = 1;
    bool   owner_is_group = 2;
}

message XattrData {
    repeated Xattr xattrs = 1;
}

message Xattr {
    string name  = 1;
    bytes  value = 2;
}
